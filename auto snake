<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Automated Snake Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: black;
            margin: 0;
            overflow: hidden;
            font-family: 'Courier New', Courier, monospace; /* Set font to Courier New */
            position: relative; /* Added relative positioning */
        }
        canvas {
            background-color: black;
            border: 2px solid white; /* Added a border to the canvas */
        }
        #scoreBoard {
            position: fixed; /* Make the scoreboard fixed */
            top: 20px;
            right: 20px;
            color: white;
            font-size: 20px;
            font-family: 'Courier New', Courier, monospace; /* Set font to Courier New */
            background-color: rgba(0, 0, 0, 0.7); /* Slightly transparent background */
            padding: 15px;
            border: 1px solid white;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.5); /* Add shadow for better visibility */
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="640" height="640"></canvas>
    <div id="scoreBoard"></div> <!-- Scoreboard for top scores -->
    
    <script>
        const canvas = document.getElementById("gameCanvas");
        const ctx = canvas.getContext("2d");

        const tileSize = 16;
        const tileCount = canvas.width / tileSize;

        let snake = [{ x: tileSize * 5, y: tileSize * 5 }];
        let direction = { x: 1, y: 0 };
        let apple = generateRandomApple();
        let score = 0;
        let highScores = [0, 0, 0]; // Top 3 high scores

        // Initialize the scoreboard on page load
        drawHighScores(); // Draw the initial empty scoreboard

        function gameLoop() {
            // Move the snake in the current direction
            let head = {
                x: snake[0].x + direction.x * tileSize,
                y: snake[0].y + direction.y * tileSize
            };

            // Check for wall collisions
            if (head.x < 0 || head.x >= canvas.width || head.y < 0 || head.y >= canvas.height) {
                resetGame();  // Reset if collision with wall detected
                return; // Exit the loop
            }

            // Check if snake eats the apple
            if (head.x === apple.x && head.y === apple.y) {
                snake.unshift(head);  // Grow snake by adding new head
                apple = generateRandomApple();  // Generate new apple
                score++;  // Increment score by 1
            } else {
                snake.pop();  // Remove last segment if not growing
                snake.unshift(head);  // Add new head position
            }

            // Check for collisions with itself
            if (snake.slice(1).some(segment => segment.x === head.x && segment.y === head.y)) {
                resetGame();  // Reset if collision detected
            }

            drawGame();
        }

        function generateRandomApple() {
            let newApple;
            do {
                newApple = {
                    x: Math.floor(Math.random() * tileCount) * tileSize,
                    y: Math.floor(Math.random() * tileCount) * tileSize
                };
            } while (snake.some(segment => segment.x === newApple.x && segment.y === newApple.y)); // Ensure apple is not on the snake
            return newApple;
        }

        function resetGame() {
            // Update high scores if current score is greater than any of the existing high scores
            updateHighScores(score);
            // Reset the game state
            snake = [{ x: tileSize * 5, y: tileSize * 5 }];
            direction = { x: 1, y: 0 };
            apple = generateRandomApple();
            score = 0;
            drawHighScores(); // Update high score display after reset
        }

        function drawGame() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw apple
            ctx.fillStyle = "red";
            ctx.fillRect(apple.x, apple.y, tileSize, tileSize);

            // Draw snake without breaks between segments
            ctx.fillStyle = "#00ff00";
            for (let i = 0; i < snake.length; i++) {
                const segment = snake[i];
                ctx.fillRect(segment.x, segment.y, tileSize, tileSize);
            }

            // Display current score
            ctx.fillStyle = "white";
            ctx.font = "20px 'Courier New'"; // Set font to Courier New for the score
            ctx.fillText(Score: ${score}, 10, 20);
        }

        function updateHighScores(newScore) {
            // Update the high scores array
            highScores.push(newScore);
            highScores.sort((a, b) => b - a); // Sort in descending order
            highScores = highScores.slice(0, 3); // Keep only top 3 scores
        }

        function drawHighScores() {
            const scoreBoard = document.getElementById('scoreBoard');
            scoreBoard.innerHTML = '<strong>Top Scores:</strong><br>';
            highScores.forEach((highScore, index) => {
                // Display a default message if no score exists
                scoreBoard.innerHTML += ${index + 1}. ${highScore || "0"}<br>;
            });
        }

        function findBestPath(start, goal) {
            // A* pathfinding algorithm
            const openSet = [start];
            const cameFrom = new Map();
            const gScore = new Map();
            const fScore = new Map();

            gScore.set(${start.x},${start.y}, 0);
            fScore.set(${start.x},${start.y}, heuristic(start, goal));

            while (openSet.length > 0) {
                // Get the node in openSet with the lowest fScore
                let current = openSet.reduce((prev, curr) => {
                    return (fScore.get(${curr.x},${curr.y}) < fScore.get(${prev.x},${prev.y}) ? curr : prev);
                });

                // If we reached the goal, reconstruct the path
                if (current.x === goal.x && current.y === goal.y) {
                    return reconstructPath(cameFrom, current);
                }

                // Remove current from openSet
                openSet.splice(openSet.indexOf(current), 1);

                // Explore neighbors
                for (let neighbor of getNeighbors(current)) {
                    if (snake.some(segment => segment.x === neighbor.x && segment.y === neighbor.y) || // Collide with snake
                        neighbor.x < 0 || neighbor.x >= canvas.width ||
                        neighbor.y < 0 || neighbor.y >= canvas.height) {
                        continue; // Ignore invalid neighbors
                    }

                    const tentativeGScore = gScore.get(${current.x},${current.y}) + 1; // Distance from start

                    if (!gScore.has(${neighbor.x},${neighbor.y}) || tentativeGScore < gScore.get(${neighbor.x},${neighbor.y})) {
                        // This path to neighbor is better than any previous one
                        cameFrom.set(${neighbor.x},${neighbor.y}, current);
                        gScore.set(${neighbor.x},${neighbor.y}, tentativeGScore);
                        fScore.set(${neighbor.x},${neighbor.y}, tentativeGScore + heuristic(neighbor, goal));

                        if (!openSet.some(node => node.x === neighbor.x && node.y === neighbor.y)) {
                            openSet.push(neighbor); // Add to open set if not already present
                        }
                    }
                }
            }

            return null; // No path found
        }

        function heuristic(a, b) {
            return Math.abs(a.x - b.x) + Math.abs(a.y - b.y); // Manhattan distance
        }

        function reconstructPath(cameFrom, current) {
            const totalPath = [current];
            while (cameFrom.has(${current.x},${current.y})) {
                current = cameFrom.get(${current.x},${current.y});
                totalPath.unshift(current);
            }
            return totalPath;
        }

        function getNeighbors(position) {
            return [
                { x: position.x, y: position.y - tileSize }, // Up
                { x: position.x, y: position.y + tileSize }, // Down
                { x: position.x - tileSize, y: position.y }, // Left
                { x: position.x + tileSize, y: position.y }  // Right
            ];
        }

        function automatedMovement() {
            const path = findBestPath(snake[0], apple);
            if (path && path.length > 1) {
                const nextStep = path[1]; // The next position to move to
                direction = {
                    x: (nextStep.x - snake[0].x) / tileSize,
                    y: (nextStep.y - snake[0].y) / tileSize
                };
            }
        }

        setInterval(() => {
            automatedMovement();
            gameLoop();
        }, 1);  // Set game speed
    </script>
</body>
</html>
